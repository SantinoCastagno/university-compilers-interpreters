############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej01a.pas
Error: caracter no reconocido:@
		fila:1	columna:2
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej01b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
error de sintaxis: se esperaba un id, se encontro una palabra reservada:  program
		fila:1	columna:17
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej01c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
Error: caracter no reconocido:©
		fila:1	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej02a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba un id, se encontro una palabra reservada:  ;
		fila:1	columna:11
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej02b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
error de sintaxis: se esperaba ' ; ', se encontro ' id '
		fila:1	columna:23
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej03a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: no se ha declarado el inicio de la función principal del programa
		fila:3	columna:4
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej03b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
error de sintaxis: se esperaba 'begin', se encontro ' var '
		fila:3	columna:4
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej03c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
error de sintaxis: no se definieron las variables
		fila:2	columna:8
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej04a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
error de sintaxis: se esperaba ' : ', se encontro ' id '
		fila:2	columna:8
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej04b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema ,, token('coma', None)
error de sintaxis: se esperaba un id, se encontro una palabra reservada:  ,
		fila:2	columna:8
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej04c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
error de sintaxis: se esperaba ' : ', se encontro ' id '
		fila:2	columna:8
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej05a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
error de sintaxis: se esperaba ' : ', se encontro ' integer '
		fila:2	columna:17
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej05b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
error de sintaxis: solo se permite tipo integer o boolean
		fila:2	columna:12
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej06a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
error de sintaxis: solo se permite tipo integer o boolean
		fila:2	columna:18
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej06b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema probar, token('id', 'id')
error de sintaxis: solo se permite tipo integer o boolean
		fila:2	columna:17
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej07a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema probar, token('id', 'id')
error de sintaxis: solo se permite tipo integer o boolean
		fila:2	columna:17
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej08a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
error de sintaxis: solo se permite tipo integer o boolean
		fila:2	columna:20
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej08b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema 100, token('enteroDato','100')
error de sintaxis: solo se permite tipo integer o boolean
		fila:2	columna:14
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej08c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
error de sintaxis: solo se permite tipo integer o boolean
		fila:2	columna:14
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej08d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema false, token('booleanDato', 'false')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
error de sintaxis: se esperaba ' : ', se encontro ' id '
		fila:2	columna:13
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej09a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
error de sintaxis: se esperaba ' ; ', se encontro ' . '
		fila:8	columna:8
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej10a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
error de sintaxis: se esperaba un id, se encontro una palabra reservada:  procedure
		fila:4	columna:20
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej10b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
error de sintaxis: se esperaba ' : ', se encontro ' ( '
		fila:5	columna:7
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej10c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
error de sintaxis: se esperaba un id, se encontro una palabra reservada:  function
		fila:5	columna:18
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej10d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
error de sintaxis: se esperaba ' : ', se encontro ' ( '
		fila:5	columna:7
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej10e.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
error de sintaxis: se esperaba un id, se encontro una palabra reservada:  function
		fila:5	columna:19
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej11a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
error de sintaxis: se esperaba ' ; ', se encontro ' : '
		fila:5	columna:28
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej11b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
error de sintaxis: se esperaba ' ; ', se encontro ' begin '
		fila:6	columna:6
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej11c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba ' : ', se encontro ' ; '
		fila:5	columna:27
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej11d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
error de sintaxis: solo se permite tipo integer o boolean
		fila:5	columna:37
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej12a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
error de sintaxis: se esperaba 'begin', se encontro ' var '
		fila:6	columna:4
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej13a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej13b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema ,, token('coma', None)
error de sintaxis: se esperaba un id, se encontro una palabra reservada:  ,
		fila:5	columna:18
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej13c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
error de sintaxis: se esperaba ' : ', se encontro ' id '
		fila:5	columna:18
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej14a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
error de sintaxis: se esperaba un id, se encontro una palabra reservada:  var
		fila:4	columna:21
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej15a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
error de sintaxis: se esperaba ' : ', se encontro ' + '
		fila:4	columna:20
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej15b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej15c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej15d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej15e.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
error de sintaxis: se esperaba ' ; ', se encontro ' . '
		fila:12	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
error de sintaxis: se esperaba 'begin', se encontro ' id '
		fila:5	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
error de sintaxis: se esperaba ' ; ', se encontro ' . '
		fila:13	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba ' ; ', se encontro ' end '
		fila:10	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16e.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba 'begin', se encontro ' end '
		fila:11	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16f.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba 'begin', se encontro ' end '
		fila:11	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16g.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba 'begin', se encontro ' end '
		fila:10	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16h.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: no se encontro una instruccion valida
		fila:8	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16i.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16j.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: no se encontro una instruccion valida
		fila:8	columna:14
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej16k.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
error de sintaxis: se esperaba ' ; ', se encontro ' id '
		fila:11	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej17a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema y, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema y, token('id', 'id')
error de sintaxis: se esperaba ' ; ', se encontro ' id '
		fila:11	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej17b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba 'begin', se encontro ' end '
		fila:5	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej17c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba 'begin', se encontro ' end '
		fila:5	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej17d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba 'begin', se encontro ' end '
		fila:5	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej17e.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: no se encontro una instruccion valida
		fila:5	columna:8
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej17f.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba ' end ', se encontro ' ; '
		fila:6	columna:13
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej18a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba ' end ', se encontro ' ; '
		fila:6	columna:13
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej18b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba ' end ', se encontro ' ; '
		fila:7	columna:14
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej18c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema x, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba ' end ', se encontro ' ; '
		fila:7	columna:14
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej19a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej19b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema d, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema and, token('keyword', 'and')
SIGUIENTE LINEA:  lexema d, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej20a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema Compila, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema d, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se espera un factor valido
		fila:7	columna:17
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej20b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema d, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema and, token('keyword', 'and')
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema or, token('keyword', 'or')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se espera un factor valido
		fila:7	columna:26
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej20c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema d, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema and, token('keyword', 'and')
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema or, token('keyword', 'or')
SIGUIENTE LINEA:  lexema d, token('id', 'id')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej20d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej20e.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema *, token('operadorAritmetico', '*')
SIGUIENTE LINEA:  lexema 2, token('enteroDato','2')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema /, token('operadorAritmetico', '/')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se espera un factor valido
		fila:6	columna:20
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej21a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 5, token('enteroDato','5')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
error de sintaxis: se espera un termino valido.
		fila:8	columna:11
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej21b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 5, token('enteroDato','5')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema >=, token('operadorRelacional', '>=')
SIGUIENTE LINEA:  lexema <, token('operadorRelacional', '<')
error de sintaxis: se espera un termino valido.
		fila:8	columna:12
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej22a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej22b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:12	columna:9
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej22c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 5, token('enteroDato','5')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej22d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej23a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej23b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej23c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej23d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema ba, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej23e.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema ,, token('coma', None)
error de sintaxis: la expresion no se inicio de manera correcta
		fila:14	columna:16
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej23f.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema function, token('keyword', 'function')
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema algo, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema ,, token('coma', None)
error de sintaxis: la expresion no se inicio de manera correcta
		fila:14	columna:16
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej24a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej24b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 5, token('enteroDato','5')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej24c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 5, token('enteroDato','5')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej24d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema and, token('keyword', 'and')
SIGUIENTE LINEA:  lexema 5, token('enteroDato','5')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej25a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema <, token('operadorRelacional', '<')
SIGUIENTE LINEA:  lexema 5, token('enteroDato','5')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 2, token('enteroDato','2')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
error de sintaxis: se esperaba ' then ', se encontro ' else '
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej25b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
error de sintaxis: se esperaba ' then ', se encontro ' else '
		fila:10	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej26a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
error de sintaxis: se esperaba ' then ', se encontro ' else '
		fila:10	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej27a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
error de sintaxis: se esperaba ' end ', se encontro ' else '
		fila:13	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej27b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba ' then ', se encontro ' ; '
		fila:10	columna:21
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej27c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
error de sintaxis: se esperaba ' end ', se encontro ' else '
		fila:12	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej28a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
error de sintaxis: no se encontro una instruccion valida
		fila:11	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej28b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: no se encontro una instruccion valida
		fila:11	columna:12
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej29a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
error de sintaxis: la expresion no se inicio de manera correcta
		fila:10	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej29b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej30.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema do, token('keyword', 'do')
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 0, token('enteroDato','0')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema false, token('booleanDato', 'false')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba ' ; ', se encontro ' end '
		fila:21	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej30a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
error de sintaxis: se esperaba ' do ', se encontro ' if '
		fila:10	columna:8
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej30b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema do, token('keyword', 'do')
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 0, token('enteroDato','0')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema false, token('booleanDato', 'false')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba ' ; ', se encontro ' end '
		fila:21	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej30c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema do, token('keyword', 'do')
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 0, token('enteroDato','0')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema false, token('booleanDato', 'false')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
error de sintaxis: se esperaba ' ; ', se encontro ' end '
		fila:21	columna:5
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej30d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema <, token('operadorRelacional', '<')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
error de sintaxis: se esperaba ' ) ', se encontro ' > '
		fila:9	columna:20
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej31.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema <, token('operadorRelacional', '<')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema do, token('keyword', 'do')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 0, token('enteroDato','0')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema false, token('booleanDato', 'false')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
error de sintaxis: se esperaba ' ; ', se encontro ' id '
		fila:22	columna:13
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej31a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema <, token('operadorRelacional', '<')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema do, token('keyword', 'do')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 0, token('enteroDato','0')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema false, token('booleanDato', 'false')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
error de sintaxis: se esperaba ' ; ', se encontro ' id '
		fila:22	columna:13
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej31b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema do, token('keyword', 'do')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: no se encontro una instruccion valida
		fila:9	columna:20
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej31c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 9, token('enteroDato','9')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema while, token('keyword', 'while')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema <, token('operadorRelacional', '<')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema do, token('keyword', 'do')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 0, token('enteroDato','0')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema false, token('booleanDato', 'false')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema write, token('id', 'id')
error de sintaxis: se esperaba ' ; ', se encontro ' id '
		fila:22	columna:13
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej32.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej32a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema of, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:12
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej32b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej32c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej33a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej33b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej34a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej34b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej34c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej34d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej35a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej36a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej36b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej36c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej39a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema case, token('id', 'id')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej40a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:9	columna:10
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej40b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
error de sintaxis: se esperaba una asignacion o la llamada a un procedimiento
		fila:8	columna:9
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej41a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej41b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej41c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema funcion, token('id', 'id')
SIGUIENTE LINEA:  lexema suma, token('id', 'id')
error de sintaxis: se esperaba ' : ', se encontro ' id '
		fila:6	columna:13
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej41d.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema suma, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
error de sintaxis: se esperaba ' ) ', se encontro ' var '
		fila:6	columna:20
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej42a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej42b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema false, token('booleanDato', 'false')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej42c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema <>, token('operadorRelacional', '<>')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej43a.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej43b.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema 10, token('enteroDato','10')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/Ej43c.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema prueba, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema read, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema b, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema c, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema true, token('booleanDato', 'true')
SIGUIENTE LINEA:  lexema e, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema 1, token('enteroDato','1')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema write, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema a, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/source_1.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema OperacionesBasicas, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema numero1, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema suma, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema resta, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema multiplicacion, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema division, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema readln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema numero1, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema readln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema suma, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema numero1, token('id', 'id')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema resta, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema numero1, token('id', 'id')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema multiplicacion, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema numero1, token('id', 'id')
SIGUIENTE LINEA:  lexema *, token('operadorAritmetico', '*')
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema <>, token('operadorRelacional', '<>')
SIGUIENTE LINEA:  lexema 0, token('enteroDato','0')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema division, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema numero1, token('id', 'id')
SIGUIENTE LINEA:  lexema /, token('operadorAritmetico', '/')
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema suma, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema resta, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema multiplicacion, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema if, token('keyword', 'if')
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema <>, token('operadorRelacional', '<>')
SIGUIENTE LINEA:  lexema 0, token('enteroDato','0')
SIGUIENTE LINEA:  lexema then, token('keyword', 'then')
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema division, token('id', 'id')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema else, token('keyword', 'else')
SIGUIENTE LINEA:  lexema writeln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema end, token('keyword', 'end')
SIGUIENTE LINEA:  lexema ., token('punto', None)
SIGUIENTE LINEA:  None
analisis sintactico-lexico terminado, programa aceptado.
############################################################
Analizando sintacticamente el fuente: ./pascal-src/source_2.pas
SIGUIENTE LINEA:  lexema program, token('keyword', 'program')
SIGUIENTE LINEA:  lexema source1, token('id', 'id')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema var, token('keyword', 'var')
SIGUIENTE LINEA:  lexema numero1, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema numero2, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema suma, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema resta, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema multiplicacion, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema division, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema relacion1, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema relacion2, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema relacion3, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema procedure, token('keyword', 'procedure')
SIGUIENTE LINEA:  lexema miproc1, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema minum, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema otronum, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema integer, token('keyword', 'integer')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema mibool, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema otrobool, token('id', 'id')
SIGUIENTE LINEA:  lexema ,, token('coma', None)
SIGUIENTE LINEA:  lexema ultimobool, token('id', 'id')
SIGUIENTE LINEA:  lexema :, token('dosPuntos', None)
SIGUIENTE LINEA:  lexema boolean, token('keyword', 'boolean')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema begin, token('keyword', 'begin')
SIGUIENTE LINEA:  lexema readln, token('id', 'id')
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema ;, token('puntoComa', None)
SIGUIENTE LINEA:  lexema relacion1, token('id', 'id')
SIGUIENTE LINEA:  lexema :=, token('asignacion', None)
SIGUIENTE LINEA:  lexema (, token('parentesis', '(')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 3, token('enteroDato','3')
SIGUIENTE LINEA:  lexema >, token('operadorRelacional', '>')
SIGUIENTE LINEA:  lexema 4, token('enteroDato','4')
SIGUIENTE LINEA:  lexema ), token('parentesis', ')')
SIGUIENTE LINEA:  lexema and, token('keyword', 'and')
SIGUIENTE LINEA:  lexema 1000, token('enteroDato','1000')
SIGUIENTE LINEA:  lexema +, token('operadorAritmetico', '+')
SIGUIENTE LINEA:  lexema 2, token('enteroDato','2')
SIGUIENTE LINEA:  lexema -, token('operadorAritmetico', '-')
SIGUIENTE LINEA:  lexema 4, token('enteroDato','4')
SIGUIENTE LINEA:  lexema =, token('operadorRelacional', '=')
SIGUIENTE LINEA:  lexema suma, token('id', 'id')
SIGUIENTE LINEA:  lexema or, token('keyword', 'or')
SIGUIENTE LINEA:  lexema 3, token('enteroDato','3')
SIGUIENTE LINEA:  lexema <>, token('operadorRelacional', '<>')
error de sintaxis: se esperaba ' ; ', se encontro ' <> '
		fila:10	columna:57
