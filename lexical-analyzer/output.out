lexema program, token('keyword', 'program')
lexema OperacionesBasicas, token('id', 'id')
lexema ;, token('puntoComa', None)
lexema var, token('keyword', 'var')
lexema numero1, token('id', 'id')
lexema ,, token('coma', None)
lexema numero2, token('id', 'id')
lexema ,, token('coma', None)
lexema suma, token('id', 'id')
lexema ,, token('coma', None)
lexema resta, token('id', 'id')
lexema ,, token('coma', None)
lexema multiplicacion, token('id', 'id')
lexema ,, token('coma', None)
lexema division, token('id', 'id')
lexema :, token('dosPuntos', None)
lexema integer, token('keyword', 'integer')
lexema ;, token('puntoComa', None)
lexema begin, token('keyword', 'begin')
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema readln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema numero1, token('id', 'id')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema readln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema numero2, token('id', 'id')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema suma, token('id', 'id')
lexema :=, token('asignacion', None)
lexema numero1, token('id', 'id')
lexema +, token('operadorAritmetico', '+')
lexema numero2, token('id', 'id')
lexema ;, token('puntoComa', None)
lexema resta, token('id', 'id')
lexema :=, token('asignacion', None)
lexema numero1, token('id', 'id')
lexema -, token('operadorAritmetico', '-')
lexema numero2, token('id', 'id')
lexema ;, token('puntoComa', None)
lexema multiplicacion, token('id', 'id')
lexema :=, token('asignacion', None)
lexema numero1, token('id', 'id')
lexema *, token('operadorAritmetico', '*')
lexema numero2, token('id', 'id')
lexema ;, token('puntoComa', None)
lexema if, token('keyword', 'if')
lexema numero2, token('id', 'id')
lexema <>, token('operadorRelacional', '<>')
lexema 0, token('enteroDato','0')
lexema then, token('keyword', 'then')
lexema division, token('id', 'id')
lexema :=, token('asignacion', None)
lexema numero1, token('id', 'id')
lexema /, token('operadorAritmetico', '/')
lexema numero2, token('id', 'id')
lexema else, token('keyword', 'else')
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema suma, token('id', 'id')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema resta, token('id', 'id')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema multiplicacion, token('id', 'id')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema if, token('keyword', 'if')
lexema numero2, token('id', 'id')
lexema <>, token('operadorRelacional', '<>')
lexema 0, token('enteroDato','0')
lexema then, token('keyword', 'then')
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema writeln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema division, token('id', 'id')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema readln, token('id', 'id')
lexema (, token('parentesis', '(')
lexema ), token('parentesis', ')')
lexema ;, token('puntoComa', None)
lexema end, token('keyword', 'end')
lexema ., token('punto', None)
